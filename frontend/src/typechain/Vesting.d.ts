/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VestingInterface extends ethers.utils.Interface {
  functions: {
    "calculateReleasePeriod(uint256,uint256)": FunctionFragment;
    "claim()": FunctionFragment;
    "cliffPeriod()": FunctionFragment;
    "getPauseData(address)": FunctionFragment;
    "getUserData(address)": FunctionFragment;
    "numNFTsReleased(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseVesting()": FunctionFragment;
    "reclaimNFTs(address)": FunctionFragment;
    "releasePeriod()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setUser(address,uint8[])": FunctionFragment;
    "setUsers(address[],uint8[][])": FunctionFragment;
    "startVesting(uint256,uint256,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpauseVesting()": FunctionFragment;
    "vestingEndTime()": FunctionFragment;
    "vestingNFT()": FunctionFragment;
    "vestingStartTime()": FunctionFragment;
    "vestingStarted()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateReleasePeriod",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cliffPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPauseData",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getUserData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "numNFTsReleased",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseVesting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reclaimNFTs", values: [string]): string;
  encodeFunctionData(
    functionFragment: "releasePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUser",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsers",
    values: [string[], BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "startVesting",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseVesting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingStarted",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateReleasePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cliffPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPauseData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numNFTsReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vestingNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestingStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingStarted",
    data: BytesLike
  ): Result;

  events: {
    "NFTsClaimed(address,uint8[])": EventFragment;
    "NFTsReclaimed(address,address,uint8[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UserDataSet(address,uint8[])": EventFragment;
    "VestingStarted()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTsReclaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserDataSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingStarted"): EventFragment;
}

export type NFTsClaimedEvent = TypedEvent<
  [string, number[]] & { user: string; tokenIds: number[] }
>;

export type NFTsReclaimedEvent = TypedEvent<
  [string, string, number[]] & {
    admin: string;
    receiver: string;
    tokenIds: number[];
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type UserDataSetEvent = TypedEvent<
  [string, number[]] & { user: string; tokenIds: number[] }
>;

export type VestingStartedEvent = TypedEvent<[] & {}>;

export class Vesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VestingInterface;

  functions: {
    calculateReleasePeriod(
      numNFTs: BigNumberish,
      numDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cliffPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPauseData(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & {
          pausedTime: BigNumber;
          timeOffset: BigNumber;
        }
      ]
    >;

    getUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [number[], BigNumber] & {
          vestedNFTs: number[];
          withdrawnCount: BigNumber;
        }
      ]
    >;

    numNFTsReleased(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseVesting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reclaimNFTs(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releasePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUser(
      account: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUsers(
      accounts: string[],
      tokenIds: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startVesting(
      timestamp: BigNumberish,
      cliffPeriod_: BigNumberish,
      releasePeriod_: BigNumberish,
      securityPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseVesting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestingEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingNFT(overrides?: CallOverrides): Promise<[string]>;

    vestingStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingStarted(overrides?: CallOverrides): Promise<[boolean]>;
  };

  calculateReleasePeriod(
    numNFTs: BigNumberish,
    numDays: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cliffPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getPauseData(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { pausedTime: BigNumber; timeOffset: BigNumber }
  >;

  getUserData(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [number[], BigNumber] & { vestedNFTs: number[]; withdrawnCount: BigNumber }
  >;

  numNFTsReleased(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseVesting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reclaimNFTs(
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releasePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUser(
    account: string,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUsers(
    accounts: string[],
    tokenIds: BigNumberish[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startVesting(
    timestamp: BigNumberish,
    cliffPeriod_: BigNumberish,
    releasePeriod_: BigNumberish,
    securityPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseVesting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestingEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  vestingNFT(overrides?: CallOverrides): Promise<string>;

  vestingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  vestingStarted(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    calculateReleasePeriod(
      numNFTs: BigNumberish,
      numDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    cliffPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getPauseData(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { pausedTime: BigNumber; timeOffset: BigNumber }
    >;

    getUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [number[], BigNumber] & {
        vestedNFTs: number[];
        withdrawnCount: BigNumber;
      }
    >;

    numNFTsReleased(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseVesting(overrides?: CallOverrides): Promise<void>;

    reclaimNFTs(receiver: string, overrides?: CallOverrides): Promise<void>;

    releasePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setUser(
      account: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setUsers(
      accounts: string[],
      tokenIds: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<void>;

    startVesting(
      timestamp: BigNumberish,
      cliffPeriod_: BigNumberish,
      releasePeriod_: BigNumberish,
      securityPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseVesting(overrides?: CallOverrides): Promise<void>;

    vestingEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    vestingNFT(overrides?: CallOverrides): Promise<string>;

    vestingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    vestingStarted(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "NFTsClaimed(address,uint8[])"(
      user?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, number[]],
      { user: string; tokenIds: number[] }
    >;

    NFTsClaimed(
      user?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, number[]],
      { user: string; tokenIds: number[] }
    >;

    "NFTsReclaimed(address,address,uint8[])"(
      admin?: null,
      receiver?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, string, number[]],
      { admin: string; receiver: string; tokenIds: number[] }
    >;

    NFTsReclaimed(
      admin?: null,
      receiver?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, string, number[]],
      { admin: string; receiver: string; tokenIds: number[] }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "UserDataSet(address,uint8[])"(
      user?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, number[]],
      { user: string; tokenIds: number[] }
    >;

    UserDataSet(
      user?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, number[]],
      { user: string; tokenIds: number[] }
    >;

    "VestingStarted()"(): TypedEventFilter<[], {}>;

    VestingStarted(): TypedEventFilter<[], {}>;
  };

  estimateGas: {
    calculateReleasePeriod(
      numNFTs: BigNumberish,
      numDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cliffPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getPauseData(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserData(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    numNFTsReleased(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseVesting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reclaimNFTs(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releasePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUser(
      account: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUsers(
      accounts: string[],
      tokenIds: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startVesting(
      timestamp: BigNumberish,
      cliffPeriod_: BigNumberish,
      releasePeriod_: BigNumberish,
      securityPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseVesting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestingEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    vestingNFT(overrides?: CallOverrides): Promise<BigNumber>;

    vestingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    vestingStarted(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateReleasePeriod(
      numNFTs: BigNumberish,
      numDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cliffPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPauseData(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numNFTsReleased(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseVesting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reclaimNFTs(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releasePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUser(
      account: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUsers(
      accounts: string[],
      tokenIds: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startVesting(
      timestamp: BigNumberish,
      cliffPeriod_: BigNumberish,
      releasePeriod_: BigNumberish,
      securityPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseVesting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestingEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
